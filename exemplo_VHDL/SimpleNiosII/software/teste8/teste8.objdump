
teste8.elf:     file format elf32-littlenios2
teste8.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x000004bc memsz 0x000004cc flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000003b8  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  000023d8  000023d8  000013d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000ec  000023f0  000023f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  000024dc  000024dc  000014dc  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  00001508  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001e5  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000025ce  00000000  00000000  00001835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000987  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001b5a  00000000  00000000  0000478a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001cc  00000000  00000000  000062e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000073c  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000003e6  00000000  00000000  00006bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00006fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00006fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00007c37  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00007c3a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00007c3d  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00007c3e  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  00007c3f  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  00007c43  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  00007c47  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000a  00000000  00000000  00007c4b  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000001d  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0001f319  00000000  00000000  00007c72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
000023d8 l    d  .rodata	00000000 .rodata
000023f0 l    d  .rwdata	00000000 .rwdata
000024dc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000023f0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00002308 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002284 g     F .text	00000040 alt_main
0000208c g     F .text	00000090 _puts_r
00000000  w      *UND*	00000000 __errno
00002000 g     F .entry	0000000c __reset
000024dc g     O .bss	00000004 errno
000024e4 g     O .bss	00000004 alt_argv
0000a4d0 g       *ABS*	00000000 _gp
0000211c g     F .text	00000014 puts
000024d4 g     O .rwdata	00000004 _global_impure_ptr
000024ec g       *ABS*	00000000 __bss_end
000022c4 g     F .text	00000044 write
000024ec g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
0000239c g     F .text	0000001c alt_sys_init
000024ec g       *ABS*	00000000 __alt_stack_base
00002150 g     F .text	000000bc __sfvwrite_small_dev
000024dc g       *ABS*	00000000 __bss_start
00002058 g     F .text	00000034 main
000024e8 g     O .bss	00000004 alt_envp
000024d8 g     O .rwdata	00000004 alt_errno
00002368 g     F .text	00000034 alt_irq_init
0000220c g     F .text	00000078 _write_r
000024d0 g     O .rwdata	00000004 _impure_ptr
000024e0 g     O .bss	00000004 alt_argc
000024dc g       *ABS*	00000000 _edata
000024ec g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
000023b8 g     F .text	00000020 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002130 g     F .text	00000020 strlen



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a93414 	ori	gp,gp,42192
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10893714 	ori	r2,r2,9436

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c93b14 	ori	r3,r3,9452

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00022840 	call	2284 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
 */

#include <stdio.h>

int main()
{
    2058:	defffe04 	addi	sp,sp,-8
    205c:	dfc00115 	stw	ra,4(sp)
    2060:	df000015 	stw	fp,0(sp)
    2064:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    2068:	01000034 	movhi	r4,0
    206c:	2108f604 	addi	r4,r4,9176
    2070:	000211c0 	call	211c <puts>

  return 0;
    2074:	0005883a 	mov	r2,zero
}
    2078:	e037883a 	mov	sp,fp
    207c:	dfc00117 	ldw	ra,4(sp)
    2080:	df000017 	ldw	fp,0(sp)
    2084:	dec00204 	addi	sp,sp,8
    2088:	f800283a 	ret

0000208c <_puts_r>:
    208c:	defffd04 	addi	sp,sp,-12
    2090:	dc000015 	stw	r16,0(sp)
    2094:	2021883a 	mov	r16,r4
    2098:	2809883a 	mov	r4,r5
    209c:	dfc00215 	stw	ra,8(sp)
    20a0:	dc400115 	stw	r17,4(sp)
    20a4:	2823883a 	mov	r17,r5
    20a8:	00021300 	call	2130 <strlen>
    20ac:	80c00217 	ldw	r3,8(r16)
    20b0:	02000034 	movhi	r8,0
    20b4:	42085404 	addi	r8,r8,8528
    20b8:	880d883a 	mov	r6,r17
    20bc:	100f883a 	mov	r7,r2
    20c0:	8009883a 	mov	r4,r16
    20c4:	180b883a 	mov	r5,r3
    20c8:	1a000115 	stw	r8,4(r3)
    20cc:	403ee83a 	callr	r8
    20d0:	047fffc4 	movi	r17,-1
    20d4:	8009883a 	mov	r4,r16
    20d8:	01800034 	movhi	r6,0
    20dc:	3188fb04 	addi	r6,r6,9196
    20e0:	01c00044 	movi	r7,1
    20e4:	1440071e 	bne	r2,r17,2104 <_puts_r+0x78>
    20e8:	00ffffc4 	movi	r3,-1
    20ec:	1805883a 	mov	r2,r3
    20f0:	dfc00217 	ldw	ra,8(sp)
    20f4:	dc400117 	ldw	r17,4(sp)
    20f8:	dc000017 	ldw	r16,0(sp)
    20fc:	dec00304 	addi	sp,sp,12
    2100:	f800283a 	ret
    2104:	81400217 	ldw	r5,8(r16)
    2108:	28c00117 	ldw	r3,4(r5)
    210c:	183ee83a 	callr	r3
    2110:	0007883a 	mov	r3,zero
    2114:	147ff51e 	bne	r2,r17,20ec <_puts_r+0x60>
    2118:	003ff306 	br	20e8 <_puts_r+0x5c>

0000211c <puts>:
    211c:	00800034 	movhi	r2,0
    2120:	10893404 	addi	r2,r2,9424
    2124:	200b883a 	mov	r5,r4
    2128:	11000017 	ldw	r4,0(r2)
    212c:	000208c1 	jmpi	208c <_puts_r>

00002130 <strlen>:
    2130:	20800007 	ldb	r2,0(r4)
    2134:	10000526 	beq	r2,zero,214c <strlen+0x1c>
    2138:	2007883a 	mov	r3,r4
    213c:	18c00044 	addi	r3,r3,1
    2140:	18800007 	ldb	r2,0(r3)
    2144:	103ffd1e 	bne	r2,zero,213c <strlen+0xc>
    2148:	1905c83a 	sub	r2,r3,r4
    214c:	f800283a 	ret

00002150 <__sfvwrite_small_dev>:
    2150:	2880000b 	ldhu	r2,0(r5)
    2154:	defffa04 	addi	sp,sp,-24
    2158:	dcc00315 	stw	r19,12(sp)
    215c:	1080020c 	andi	r2,r2,8
    2160:	dc800215 	stw	r18,8(sp)
    2164:	dc400115 	stw	r17,4(sp)
    2168:	dfc00515 	stw	ra,20(sp)
    216c:	dd000415 	stw	r20,16(sp)
    2170:	dc000015 	stw	r16,0(sp)
    2174:	2825883a 	mov	r18,r5
    2178:	2027883a 	mov	r19,r4
    217c:	3023883a 	mov	r17,r6
    2180:	10002026 	beq	r2,zero,2204 <__sfvwrite_small_dev+0xb4>
    2184:	2940008f 	ldh	r5,2(r5)
    2188:	28000f16 	blt	r5,zero,21c8 <__sfvwrite_small_dev+0x78>
    218c:	01c01b0e 	bge	zero,r7,21fc <__sfvwrite_small_dev+0xac>
    2190:	3821883a 	mov	r16,r7
    2194:	05010004 	movi	r20,1024
    2198:	00000206 	br	21a4 <__sfvwrite_small_dev+0x54>
    219c:	0400170e 	bge	zero,r16,21fc <__sfvwrite_small_dev+0xac>
    21a0:	9140008f 	ldh	r5,2(r18)
    21a4:	880d883a 	mov	r6,r17
    21a8:	9809883a 	mov	r4,r19
    21ac:	800f883a 	mov	r7,r16
    21b0:	a400010e 	bge	r20,r16,21b8 <__sfvwrite_small_dev+0x68>
    21b4:	01c10004 	movi	r7,1024
    21b8:	000220c0 	call	220c <_write_r>
    21bc:	88a3883a 	add	r17,r17,r2
    21c0:	80a1c83a 	sub	r16,r16,r2
    21c4:	00bff516 	blt	zero,r2,219c <__sfvwrite_small_dev+0x4c>
    21c8:	9080000b 	ldhu	r2,0(r18)
    21cc:	00ffffc4 	movi	r3,-1
    21d0:	10801014 	ori	r2,r2,64
    21d4:	9080000d 	sth	r2,0(r18)
    21d8:	1805883a 	mov	r2,r3
    21dc:	dfc00517 	ldw	ra,20(sp)
    21e0:	dd000417 	ldw	r20,16(sp)
    21e4:	dcc00317 	ldw	r19,12(sp)
    21e8:	dc800217 	ldw	r18,8(sp)
    21ec:	dc400117 	ldw	r17,4(sp)
    21f0:	dc000017 	ldw	r16,0(sp)
    21f4:	dec00604 	addi	sp,sp,24
    21f8:	f800283a 	ret
    21fc:	0007883a 	mov	r3,zero
    2200:	003ff506 	br	21d8 <__sfvwrite_small_dev+0x88>
    2204:	00ffffc4 	movi	r3,-1
    2208:	003ff306 	br	21d8 <__sfvwrite_small_dev+0x88>

0000220c <_write_r>:
    220c:	defffd04 	addi	sp,sp,-12
    2210:	dc000015 	stw	r16,0(sp)
    2214:	04000034 	movhi	r16,0
    2218:	84093704 	addi	r16,r16,9436
    221c:	dc400115 	stw	r17,4(sp)
    2220:	80000015 	stw	zero,0(r16)
    2224:	2023883a 	mov	r17,r4
    2228:	2809883a 	mov	r4,r5
    222c:	300b883a 	mov	r5,r6
    2230:	380d883a 	mov	r6,r7
    2234:	dfc00215 	stw	ra,8(sp)
    2238:	00022c40 	call	22c4 <write>
    223c:	1007883a 	mov	r3,r2
    2240:	00bfffc4 	movi	r2,-1
    2244:	18800626 	beq	r3,r2,2260 <_write_r+0x54>
    2248:	1805883a 	mov	r2,r3
    224c:	dfc00217 	ldw	ra,8(sp)
    2250:	dc400117 	ldw	r17,4(sp)
    2254:	dc000017 	ldw	r16,0(sp)
    2258:	dec00304 	addi	sp,sp,12
    225c:	f800283a 	ret
    2260:	80800017 	ldw	r2,0(r16)
    2264:	103ff826 	beq	r2,zero,2248 <_write_r+0x3c>
    2268:	88800015 	stw	r2,0(r17)
    226c:	1805883a 	mov	r2,r3
    2270:	dfc00217 	ldw	ra,8(sp)
    2274:	dc400117 	ldw	r17,4(sp)
    2278:	dc000017 	ldw	r16,0(sp)
    227c:	dec00304 	addi	sp,sp,12
    2280:	f800283a 	ret

00002284 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2284:	defffe04 	addi	sp,sp,-8
    2288:	dfc00115 	stw	ra,4(sp)
    228c:	df000015 	stw	fp,0(sp)
    2290:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2294:	0009883a 	mov	r4,zero
    2298:	00023680 	call	2368 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    229c:	000239c0 	call	239c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22a0:	d1200417 	ldw	r4,-32752(gp)
    22a4:	d1600517 	ldw	r5,-32748(gp)
    22a8:	d1a00617 	ldw	r6,-32744(gp)
    22ac:	00020580 	call	2058 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    22b0:	e037883a 	mov	sp,fp
    22b4:	dfc00117 	ldw	ra,4(sp)
    22b8:	df000017 	ldw	fp,0(sp)
    22bc:	dec00204 	addi	sp,sp,8
    22c0:	f800283a 	ret

000022c4 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    22c4:	defffb04 	addi	sp,sp,-20
    22c8:	dfc00415 	stw	ra,16(sp)
    22cc:	df000315 	stw	fp,12(sp)
    22d0:	df000304 	addi	fp,sp,12
    22d4:	e13ffd15 	stw	r4,-12(fp)
    22d8:	e17ffe15 	stw	r5,-8(fp)
    22dc:	e1bfff15 	stw	r6,-4(fp)
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    22e0:	00023080 	call	2308 <alt_get_errno>
    22e4:	1007883a 	mov	r3,r2
    22e8:	00801444 	movi	r2,81
    22ec:	18800015 	stw	r2,0(r3)
        return -1;
    22f0:	00bfffc4 	movi	r2,-1
    }
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2308:	defffd04 	addi	sp,sp,-12
    230c:	dfc00215 	stw	ra,8(sp)
    2310:	df000115 	stw	fp,4(sp)
    2314:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2318:	00800034 	movhi	r2,0
    231c:	10893604 	addi	r2,r2,9432
    2320:	10800017 	ldw	r2,0(r2)
    2324:	1005003a 	cmpeq	r2,r2,zero
    2328:	1000061e 	bne	r2,zero,2344 <alt_get_errno+0x3c>
    232c:	00800034 	movhi	r2,0
    2330:	10893604 	addi	r2,r2,9432
    2334:	10800017 	ldw	r2,0(r2)
    2338:	103ee83a 	callr	r2
    233c:	e0bfff15 	stw	r2,-4(fp)
    2340:	00000306 	br	2350 <alt_get_errno+0x48>
    2344:	00800034 	movhi	r2,0
    2348:	10893704 	addi	r2,r2,9436
    234c:	e0bfff15 	stw	r2,-4(fp)
    2350:	e0bfff17 	ldw	r2,-4(fp)
}
    2354:	e037883a 	mov	sp,fp
    2358:	dfc00117 	ldw	ra,4(sp)
    235c:	df000017 	ldw	fp,0(sp)
    2360:	dec00204 	addi	sp,sp,8
    2364:	f800283a 	ret

00002368 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2368:	defffd04 	addi	sp,sp,-12
    236c:	dfc00215 	stw	ra,8(sp)
    2370:	df000115 	stw	fp,4(sp)
    2374:	df000104 	addi	fp,sp,4
    2378:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    237c:	00023b80 	call	23b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2380:	00800044 	movi	r2,1
    2384:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2388:	e037883a 	mov	sp,fp
    238c:	dfc00117 	ldw	ra,4(sp)
    2390:	df000017 	ldw	fp,0(sp)
    2394:	dec00204 	addi	sp,sp,8
    2398:	f800283a 	ret

0000239c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    239c:	deffff04 	addi	sp,sp,-4
    23a0:	df000015 	stw	fp,0(sp)
    23a4:	d839883a 	mov	fp,sp
}
    23a8:	e037883a 	mov	sp,fp
    23ac:	df000017 	ldw	fp,0(sp)
    23b0:	dec00104 	addi	sp,sp,4
    23b4:	f800283a 	ret

000023b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    23b8:	deffff04 	addi	sp,sp,-4
    23bc:	df000015 	stw	fp,0(sp)
    23c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    23c4:	000170fa 	wrctl	ienable,zero
}
    23c8:	e037883a 	mov	sp,fp
    23cc:	df000017 	ldw	fp,0(sp)
    23d0:	dec00104 	addi	sp,sp,4
    23d4:	f800283a 	ret
