
SNios2.elf:     file format elf32-littlenios2
SNios2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000900 memsz 0x0000090c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000004f4  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  00002514  00002514  00001514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000408  00002518  00002518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  00002920  00002920  00001920  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  00001948  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000162  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001cf2  00000000  00000000  00001bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000694  00000000  00000000  000038a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001082  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000168  00000000  00000000  00004fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000732  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000026c  00000000  00000000  00005856  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00005ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00005ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006699  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0000669c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000066a0  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  000066a1  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  000066a5  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000004  00000000  00000000  000066ad  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000008  00000000  00000000  000066b1  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0001f435  00000000  00000000  000066b9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002514 l    d  .rodata	00000000 .rodata
00002518 l    d  .rwdata	00000000 .rwdata
00002920 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
00002518 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002464 g     F .text	00000040 alt_main
00002000 g     F .entry	0000000c __reset
00002924 g     O .bss	00000004 alt_argv
0000a918 g       *ABS*	00000000 _gp
0000291c g     O .rwdata	00000004 _global_impure_ptr
0000292c g       *ABS*	00000000 __bss_end
0000292c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
00002290 g     F .text	00000078 rand
000024d8 g     F .text	0000001c alt_sys_init
0000242c g     F .text	00000038 __mulsi3
0000292c g       *ABS*	00000000 __alt_stack_base
00002920 g       *ABS*	00000000 __bss_start
00002058 g     F .text	0000021c main
00002928 g     O .bss	00000004 alt_envp
00002274 g     F .text	0000001c srand
000024a4 g     F .text	00000034 alt_irq_init
00002918 g     O .rwdata	00000004 _impure_ptr
00002920 g     O .bss	00000004 alt_argc
00002920 g       *ABS*	00000000 _edata
0000292c g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
000024f4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
00002308 g     F .text	00000124 __muldi3



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6aa4614 	ori	gp,gp,43288
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108a4814 	ori	r2,r2,10528

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18ca4b14 	ori	r3,r3,10540

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00024640 	call	2464 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
#include "system.h"

#include "io.h"

int main()
{
    2058:	deffe204 	addi	sp,sp,-120
    205c:	dfc01d15 	stw	ra,116(sp)
    2060:	df001c15 	stw	fp,112(sp)
    2064:	df001c04 	addi	fp,sp,112
	int envio[10],recibo[10]; //cria vetor de envio e recibo
	int i=0, flag=0, atual, aux;
    2068:	e03fe915 	stw	zero,-92(fp)
    206c:	e03fe815 	stw	zero,-96(fp)
	int *pWr, *pRd;
	pRd = TOP_AVALON1_0_BASE;
    2070:	e03fe415 	stw	zero,-112(fp)
	pWr = TOP_AVALON1_0_BASE;
    2074:	e03fe515 	stw	zero,-108(fp)

	while(1){
		for(i=0;i<10;i++)
    2078:	e03fe915 	stw	zero,-92(fp)
    207c:	00002006 	br	2100 <main+0xa8>
		{
			envio[i] = (rand()%64);
    2080:	e0bfe917 	ldw	r2,-92(fp)
    2084:	e0bffe15 	stw	r2,-8(fp)
    2088:	00022900 	call	2290 <rand>
    208c:	00e00034 	movhi	r3,32768
    2090:	18c00fc4 	addi	r3,r3,63
    2094:	10c4703a 	and	r2,r2,r3
    2098:	e0bfff15 	stw	r2,-4(fp)
    209c:	e0ffff17 	ldw	r3,-4(fp)
    20a0:	1804403a 	cmpge	r2,r3,zero
    20a4:	10000a1e 	bne	r2,zero,20d0 <main+0x78>
    20a8:	e13fff17 	ldw	r4,-4(fp)
    20ac:	213fffc4 	addi	r4,r4,-1
    20b0:	e13fff15 	stw	r4,-4(fp)
    20b4:	00bff004 	movi	r2,-64
    20b8:	e17fff17 	ldw	r5,-4(fp)
    20bc:	288ab03a 	or	r5,r5,r2
    20c0:	e17fff15 	stw	r5,-4(fp)
    20c4:	e0bfff17 	ldw	r2,-4(fp)
    20c8:	10800044 	addi	r2,r2,1
    20cc:	e0bfff15 	stw	r2,-4(fp)
    20d0:	e0ffff17 	ldw	r3,-4(fp)
    20d4:	e13ffe17 	ldw	r4,-8(fp)
    20d8:	e13ffe17 	ldw	r4,-8(fp)
    20dc:	2105883a 	add	r2,r4,r4
    20e0:	1085883a 	add	r2,r2,r2
    20e4:	e17fe404 	addi	r5,fp,-112
    20e8:	1145883a 	add	r2,r2,r5
    20ec:	10800604 	addi	r2,r2,24
    20f0:	10c00015 	stw	r3,0(r2)
	int *pWr, *pRd;
	pRd = TOP_AVALON1_0_BASE;
	pWr = TOP_AVALON1_0_BASE;

	while(1){
		for(i=0;i<10;i++)
    20f4:	e0bfe917 	ldw	r2,-92(fp)
    20f8:	10800044 	addi	r2,r2,1
    20fc:	e0bfe915 	stw	r2,-92(fp)
    2100:	e0bfe917 	ldw	r2,-92(fp)
    2104:	10800290 	cmplti	r2,r2,10
    2108:	103fdd1e 	bne	r2,zero,2080 <main+0x28>
		{
			envio[i] = (rand()%64);
		}
		for(i=0;i<10;i++)
    210c:	e03fe915 	stw	zero,-92(fp)
    2110:	00001006 	br	2154 <main+0xfc>
		{
			*(pWr + 1) = envio[i];
    2114:	e0bfe517 	ldw	r2,-108(fp)
    2118:	10c00104 	addi	r3,r2,4
    211c:	e0bfe917 	ldw	r2,-92(fp)
    2120:	1085883a 	add	r2,r2,r2
    2124:	1085883a 	add	r2,r2,r2
    2128:	e13fe404 	addi	r4,fp,-112
    212c:	1105883a 	add	r2,r2,r4
    2130:	10800604 	addi	r2,r2,24
    2134:	10800017 	ldw	r2,0(r2)
    2138:	18800015 	stw	r2,0(r3)
			*(pWr + 0) = i;
    213c:	e0ffe517 	ldw	r3,-108(fp)
    2140:	e0bfe917 	ldw	r2,-92(fp)
    2144:	18800015 	stw	r2,0(r3)
	while(1){
		for(i=0;i<10;i++)
		{
			envio[i] = (rand()%64);
		}
		for(i=0;i<10;i++)
    2148:	e0bfe917 	ldw	r2,-92(fp)
    214c:	10800044 	addi	r2,r2,1
    2150:	e0bfe915 	stw	r2,-92(fp)
    2154:	e0bfe917 	ldw	r2,-92(fp)
    2158:	10800290 	cmplti	r2,r2,10
    215c:	103fed1e 	bne	r2,zero,2114 <main+0xbc>
		{
			*(pWr + 1) = envio[i];
			*(pWr + 0) = i;
		}
		*(pWr + 1) = 0;
    2160:	e0bfe517 	ldw	r2,-108(fp)
    2164:	10800104 	addi	r2,r2,4
    2168:	10000015 	stw	zero,0(r2)

		for(i=0;i<10;i++)
    216c:	e03fe915 	stw	zero,-92(fp)
    2170:	00001106 	br	21b8 <main+0x160>
		{
			*(pWr + 0) = i;
    2174:	e0ffe517 	ldw	r3,-108(fp)
    2178:	e0bfe917 	ldw	r2,-92(fp)
    217c:	18800015 	stw	r2,0(r3)
			aux =*pRd;
    2180:	e0bfe417 	ldw	r2,-112(fp)
    2184:	10800017 	ldw	r2,0(r2)
    2188:	e0bfe615 	stw	r2,-104(fp)
			recibo[i] = aux;
    218c:	e0bfe917 	ldw	r2,-92(fp)
    2190:	1085883a 	add	r2,r2,r2
    2194:	1085883a 	add	r2,r2,r2
    2198:	e17fe404 	addi	r5,fp,-112
    219c:	1145883a 	add	r2,r2,r5
    21a0:	10c01004 	addi	r3,r2,64
    21a4:	e0bfe617 	ldw	r2,-104(fp)
    21a8:	18800015 	stw	r2,0(r3)
			*(pWr + 1) = envio[i];
			*(pWr + 0) = i;
		}
		*(pWr + 1) = 0;

		for(i=0;i<10;i++)
    21ac:	e0bfe917 	ldw	r2,-92(fp)
    21b0:	10800044 	addi	r2,r2,1
    21b4:	e0bfe915 	stw	r2,-92(fp)
    21b8:	e0bfe917 	ldw	r2,-92(fp)
    21bc:	10800290 	cmplti	r2,r2,10
    21c0:	103fec1e 	bne	r2,zero,2174 <main+0x11c>
		{
			*(pWr + 0) = i;
			aux =*pRd;
			recibo[i] = aux;
		}
		for (i=0;i<10;i++){
    21c4:	e03fe915 	stw	zero,-92(fp)
    21c8:	00001406 	br	221c <main+0x1c4>
			if(envio[i]!=recibo[i])
    21cc:	e0bfe917 	ldw	r2,-92(fp)
    21d0:	1085883a 	add	r2,r2,r2
    21d4:	1085883a 	add	r2,r2,r2
    21d8:	e0ffe404 	addi	r3,fp,-112
    21dc:	10c5883a 	add	r2,r2,r3
    21e0:	10800604 	addi	r2,r2,24
    21e4:	10c00017 	ldw	r3,0(r2)
    21e8:	e0bfe917 	ldw	r2,-92(fp)
    21ec:	1085883a 	add	r2,r2,r2
    21f0:	1085883a 	add	r2,r2,r2
    21f4:	e13fe404 	addi	r4,fp,-112
    21f8:	1105883a 	add	r2,r2,r4
    21fc:	10801004 	addi	r2,r2,64
    2200:	10800017 	ldw	r2,0(r2)
    2204:	18800226 	beq	r3,r2,2210 <main+0x1b8>
				flag = 1;
    2208:	00800044 	movi	r2,1
    220c:	e0bfe815 	stw	r2,-96(fp)
		{
			*(pWr + 0) = i;
			aux =*pRd;
			recibo[i] = aux;
		}
		for (i=0;i<10;i++){
    2210:	e0bfe917 	ldw	r2,-92(fp)
    2214:	10800044 	addi	r2,r2,1
    2218:	e0bfe915 	stw	r2,-92(fp)
    221c:	e0bfe917 	ldw	r2,-92(fp)
    2220:	10800290 	cmplti	r2,r2,10
    2224:	103fe91e 	bne	r2,zero,21cc <main+0x174>
			if(envio[i]!=recibo[i])
				flag = 1;
		}
		if(flag)
    2228:	e0bfe817 	ldw	r2,-96(fp)
    222c:	1005003a 	cmpeq	r2,r2,zero
    2230:	1000061e 	bne	r2,zero,224c <main+0x1f4>
			*(pWr + 2)= 1180789100; //Fail
    2234:	e0bfe517 	ldw	r2,-108(fp)
    2238:	10c00204 	addi	r3,r2,8
    223c:	00919874 	movhi	r2,18017
    2240:	109a5b04 	addi	r2,r2,26988
    2244:	18800015 	stw	r2,0(r3)
    2248:	00000506 	br	2260 <main+0x208>
		else
			*(pWr + 2)= 1348563827; //Pass
    224c:	e0bfe517 	ldw	r2,-108(fp)
    2250:	10c00204 	addi	r3,r2,8
    2254:	00941874 	movhi	r2,20577
    2258:	109cdcc4 	addi	r2,r2,29555
    225c:	18800015 	stw	r2,0(r3)
		atual= *(pRd+1);
    2260:	e0bfe417 	ldw	r2,-112(fp)
    2264:	10800104 	addi	r2,r2,4
    2268:	10800017 	ldw	r2,0(r2)
    226c:	e0bfe715 	stw	r2,-100(fp)
	}
    2270:	003f8106 	br	2078 <main+0x20>

00002274 <srand>:
    2274:	00800034 	movhi	r2,0
    2278:	108a4604 	addi	r2,r2,10520
    227c:	11400017 	ldw	r5,0(r2)
    2280:	0007883a 	mov	r3,zero
    2284:	28c02a15 	stw	r3,168(r5)
    2288:	29002915 	stw	r4,164(r5)
    228c:	f800283a 	ret

00002290 <rand>:
    2290:	defffe04 	addi	sp,sp,-8
    2294:	00800034 	movhi	r2,0
    2298:	108a4604 	addi	r2,r2,10520
    229c:	dc000015 	stw	r16,0(sp)
    22a0:	14000017 	ldw	r16,0(r2)
    22a4:	dfc00115 	stw	ra,4(sp)
    22a8:	00932574 	movhi	r2,19605
    22ac:	109fcb44 	addi	r2,r2,32557
    22b0:	82002917 	ldw	r8,164(r16)
    22b4:	82402a17 	ldw	r9,168(r16)
    22b8:	00d614b4 	movhi	r3,22610
    22bc:	18fd0b44 	addi	r3,r3,-3027
    22c0:	4009883a 	mov	r4,r8
    22c4:	180f883a 	mov	r7,r3
    22c8:	100d883a 	mov	r6,r2
    22cc:	480b883a 	mov	r5,r9
    22d0:	00023080 	call	2308 <__muldi3>
    22d4:	02000044 	movi	r8,1
    22d8:	1209883a 	add	r4,r2,r8
    22dc:	2095803a 	cmpltu	r10,r4,r2
    22e0:	50d5883a 	add	r10,r10,r3
    22e4:	81002915 	stw	r4,164(r16)
    22e8:	01200034 	movhi	r4,32768
    22ec:	213fffc4 	addi	r4,r4,-1
    22f0:	2284703a 	and	r2,r4,r10
    22f4:	82802a15 	stw	r10,168(r16)
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	dc000017 	ldw	r16,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <__muldi3>:
    2308:	defff204 	addi	sp,sp,-56
    230c:	df000c15 	stw	fp,48(sp)
    2310:	3038d43a 	srli	fp,r6,16
    2314:	dd000815 	stw	r20,32(sp)
    2318:	dc400515 	stw	r17,20(sp)
    231c:	2028d43a 	srli	r20,r4,16
    2320:	247fffcc 	andi	r17,r4,65535
    2324:	dc000415 	stw	r16,16(sp)
    2328:	343fffcc 	andi	r16,r6,65535
    232c:	dcc00715 	stw	r19,28(sp)
    2330:	d9000015 	stw	r4,0(sp)
    2334:	2827883a 	mov	r19,r5
    2338:	8809883a 	mov	r4,r17
    233c:	d9400115 	stw	r5,4(sp)
    2340:	800b883a 	mov	r5,r16
    2344:	d9800215 	stw	r6,8(sp)
    2348:	dfc00d15 	stw	ra,52(sp)
    234c:	d9c00315 	stw	r7,12(sp)
    2350:	dd800a15 	stw	r22,40(sp)
    2354:	dd400915 	stw	r21,36(sp)
    2358:	302d883a 	mov	r22,r6
    235c:	ddc00b15 	stw	r23,44(sp)
    2360:	dc800615 	stw	r18,24(sp)
    2364:	000242c0 	call	242c <__mulsi3>
    2368:	8809883a 	mov	r4,r17
    236c:	e00b883a 	mov	r5,fp
    2370:	102b883a 	mov	r21,r2
    2374:	000242c0 	call	242c <__mulsi3>
    2378:	800b883a 	mov	r5,r16
    237c:	a009883a 	mov	r4,r20
    2380:	1023883a 	mov	r17,r2
    2384:	000242c0 	call	242c <__mulsi3>
    2388:	a009883a 	mov	r4,r20
    238c:	e00b883a 	mov	r5,fp
    2390:	1021883a 	mov	r16,r2
    2394:	000242c0 	call	242c <__mulsi3>
    2398:	a8ffffcc 	andi	r3,r21,65535
    239c:	a82ad43a 	srli	r21,r21,16
    23a0:	8c23883a 	add	r17,r17,r16
    23a4:	1011883a 	mov	r8,r2
    23a8:	ac6b883a 	add	r21,r21,r17
    23ac:	a804943a 	slli	r2,r21,16
    23b0:	b009883a 	mov	r4,r22
    23b4:	980b883a 	mov	r5,r19
    23b8:	10c7883a 	add	r3,r2,r3
    23bc:	a812d43a 	srli	r9,r21,16
    23c0:	180d883a 	mov	r6,r3
    23c4:	ac00022e 	bgeu	r21,r16,23d0 <__muldi3+0xc8>
    23c8:	00800074 	movhi	r2,1
    23cc:	4091883a 	add	r8,r8,r2
    23d0:	4267883a 	add	r19,r8,r9
    23d4:	302d883a 	mov	r22,r6
    23d8:	000242c0 	call	242c <__mulsi3>
    23dc:	d9400317 	ldw	r5,12(sp)
    23e0:	d9000017 	ldw	r4,0(sp)
    23e4:	1023883a 	mov	r17,r2
    23e8:	000242c0 	call	242c <__mulsi3>
    23ec:	14cb883a 	add	r5,r2,r19
    23f0:	894b883a 	add	r5,r17,r5
    23f4:	b005883a 	mov	r2,r22
    23f8:	2807883a 	mov	r3,r5
    23fc:	dfc00d17 	ldw	ra,52(sp)
    2400:	df000c17 	ldw	fp,48(sp)
    2404:	ddc00b17 	ldw	r23,44(sp)
    2408:	dd800a17 	ldw	r22,40(sp)
    240c:	dd400917 	ldw	r21,36(sp)
    2410:	dd000817 	ldw	r20,32(sp)
    2414:	dcc00717 	ldw	r19,28(sp)
    2418:	dc800617 	ldw	r18,24(sp)
    241c:	dc400517 	ldw	r17,20(sp)
    2420:	dc000417 	ldw	r16,16(sp)
    2424:	dec00e04 	addi	sp,sp,56
    2428:	f800283a 	ret

0000242c <__mulsi3>:
    242c:	20000a26 	beq	r4,zero,2458 <__mulsi3+0x2c>
    2430:	0007883a 	mov	r3,zero
    2434:	2080004c 	andi	r2,r4,1
    2438:	1005003a 	cmpeq	r2,r2,zero
    243c:	2008d07a 	srli	r4,r4,1
    2440:	1000011e 	bne	r2,zero,2448 <__mulsi3+0x1c>
    2444:	1947883a 	add	r3,r3,r5
    2448:	294b883a 	add	r5,r5,r5
    244c:	203ff91e 	bne	r4,zero,2434 <__mulsi3+0x8>
    2450:	1805883a 	mov	r2,r3
    2454:	f800283a 	ret
    2458:	0007883a 	mov	r3,zero
    245c:	1805883a 	mov	r2,r3
    2460:	f800283a 	ret

00002464 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2464:	defffe04 	addi	sp,sp,-8
    2468:	dfc00115 	stw	ra,4(sp)
    246c:	df000015 	stw	fp,0(sp)
    2470:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2474:	0009883a 	mov	r4,zero
    2478:	00024a40 	call	24a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    247c:	00024d80 	call	24d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2480:	d1200217 	ldw	r4,-32760(gp)
    2484:	d1600317 	ldw	r5,-32756(gp)
    2488:	d1a00417 	ldw	r6,-32752(gp)
    248c:	00020580 	call	2058 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2490:	e037883a 	mov	sp,fp
    2494:	dfc00117 	ldw	ra,4(sp)
    2498:	df000017 	ldw	fp,0(sp)
    249c:	dec00204 	addi	sp,sp,8
    24a0:	f800283a 	ret

000024a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    24a4:	defffd04 	addi	sp,sp,-12
    24a8:	dfc00215 	stw	ra,8(sp)
    24ac:	df000115 	stw	fp,4(sp)
    24b0:	df000104 	addi	fp,sp,4
    24b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    24b8:	00024f40 	call	24f4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    24bc:	00800044 	movi	r2,1
    24c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    24c4:	e037883a 	mov	sp,fp
    24c8:	dfc00117 	ldw	ra,4(sp)
    24cc:	df000017 	ldw	fp,0(sp)
    24d0:	dec00204 	addi	sp,sp,8
    24d4:	f800283a 	ret

000024d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    24d8:	deffff04 	addi	sp,sp,-4
    24dc:	df000015 	stw	fp,0(sp)
    24e0:	d839883a 	mov	fp,sp
}
    24e4:	e037883a 	mov	sp,fp
    24e8:	df000017 	ldw	fp,0(sp)
    24ec:	dec00104 	addi	sp,sp,4
    24f0:	f800283a 	ret

000024f4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    24f4:	deffff04 	addi	sp,sp,-4
    24f8:	df000015 	stw	fp,0(sp)
    24fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2500:	000170fa 	wrctl	ienable,zero
}
    2504:	e037883a 	mov	sp,fp
    2508:	df000017 	ldw	fp,0(sp)
    250c:	dec00104 	addi	sp,sp,4
    2510:	f800283a 	ret
