
SNIOS1.elf:     file format elf32-littlenios2
SNIOS1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000164 memsz 0x00000170 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000164  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00002184  00002184  00001184  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000011b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000c6  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000070c  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000230  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000925  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000048  00000000  00000000  0000264c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d7  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  0000276c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00002780  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY
 15 .cpu          00000003  00000000  00000000  0000311f  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  00003122  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  00003123  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  00003128  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 00000004  00000000  00000000  00003130  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 00000008  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY
 23 .sopcinfo     0001f435  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002184 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000020d4 g     F .text	00000040 alt_main
00002000 g     F .entry	0000000c __reset
00002188 g     O .bss	00000004 alt_argv
0000a184 g       *ABS*	00000000 _gp
00002190 g       *ABS*	00000000 __bss_end
00002190 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
00002148 g     F .text	0000001c alt_sys_init
00002190 g       *ABS*	00000000 __alt_stack_base
00002184 g       *ABS*	00000000 __bss_start
00002058 g     F .text	0000007c main
0000218c g     O .bss	00000004 alt_envp
00002114 g     F .text	00000034 alt_irq_init
00002184 g     O .bss	00000004 alt_argc
00002184 g       *ABS*	00000000 _edata
00002190 g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
00002164 g     F .text	00000020 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a86114 	ori	gp,gp,41348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10886114 	ori	r2,r2,8580

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c86414 	ori	r3,r3,8592

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00020d40 	call	20d4 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
#include "system.h"

#include "io.h"

int main()
{
    2058:	defffb04 	addi	sp,sp,-20
    205c:	df000415 	stw	fp,16(sp)
    2060:	df000404 	addi	fp,sp,16
	//printf("Hello from Nios II!\n");

	int atual , i=0;
    2064:	e03ffe15 	stw	zero,-8(fp)
	int *pWr, *pRd;
	while (i++<50){
    2068:	00000c06 	br	209c <main+0x44>
		pRd = TOP_AVALON1_0_BASE;
    206c:	e03ffc15 	stw	zero,-16(fp)
		pWr = TOP_AVALON1_0_BASE;
    2070:	e03ffd15 	stw	zero,-12(fp)
		*(pWr + 0) = 0x00000011;
    2074:	e0fffd17 	ldw	r3,-12(fp)
    2078:	00800444 	movi	r2,17
    207c:	18800015 	stw	r2,0(r3)
		*(pWr + 1) = 0x00000077;
    2080:	e0bffd17 	ldw	r2,-12(fp)
    2084:	10c00104 	addi	r3,r2,4
    2088:	00801dc4 	movi	r2,119
    208c:	18800015 	stw	r2,0(r3)
		atual = *pRd;
    2090:	e0bffc17 	ldw	r2,-16(fp)
    2094:	10800017 	ldw	r2,0(r2)
    2098:	e0bfff15 	stw	r2,-4(fp)
{
	//printf("Hello from Nios II!\n");

	int atual , i=0;
	int *pWr, *pRd;
	while (i++<50){
    209c:	e0bffe17 	ldw	r2,-8(fp)
    20a0:	10800c90 	cmplti	r2,r2,50
    20a4:	1007883a 	mov	r3,r2
    20a8:	e0bffe17 	ldw	r2,-8(fp)
    20ac:	10800044 	addi	r2,r2,1
    20b0:	e0bffe15 	stw	r2,-8(fp)
    20b4:	18803fcc 	andi	r2,r3,255
    20b8:	1004c03a 	cmpne	r2,r2,zero
    20bc:	103feb1e 	bne	r2,zero,206c <main+0x14>
		*(pWr + 0) = 0x00000011;
		*(pWr + 1) = 0x00000077;
		atual = *pRd;
	}

	return 0;
    20c0:	0005883a 	mov	r2,zero
}
    20c4:	e037883a 	mov	sp,fp
    20c8:	df000017 	ldw	fp,0(sp)
    20cc:	dec00104 	addi	sp,sp,4
    20d0:	f800283a 	ret

000020d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    20d4:	defffe04 	addi	sp,sp,-8
    20d8:	dfc00115 	stw	ra,4(sp)
    20dc:	df000015 	stw	fp,0(sp)
    20e0:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    20e4:	0009883a 	mov	r4,zero
    20e8:	00021140 	call	2114 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    20ec:	00021480 	call	2148 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    20f0:	d1200017 	ldw	r4,-32768(gp)
    20f4:	d1600117 	ldw	r5,-32764(gp)
    20f8:	d1a00217 	ldw	r6,-32760(gp)
    20fc:	00020580 	call	2058 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2100:	e037883a 	mov	sp,fp
    2104:	dfc00117 	ldw	ra,4(sp)
    2108:	df000017 	ldw	fp,0(sp)
    210c:	dec00204 	addi	sp,sp,8
    2110:	f800283a 	ret

00002114 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2114:	defffd04 	addi	sp,sp,-12
    2118:	dfc00215 	stw	ra,8(sp)
    211c:	df000115 	stw	fp,4(sp)
    2120:	df000104 	addi	fp,sp,4
    2124:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2128:	00021640 	call	2164 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    212c:	00800044 	movi	r2,1
    2130:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2134:	e037883a 	mov	sp,fp
    2138:	dfc00117 	ldw	ra,4(sp)
    213c:	df000017 	ldw	fp,0(sp)
    2140:	dec00204 	addi	sp,sp,8
    2144:	f800283a 	ret

00002148 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2148:	deffff04 	addi	sp,sp,-4
    214c:	df000015 	stw	fp,0(sp)
    2150:	d839883a 	mov	fp,sp
}
    2154:	e037883a 	mov	sp,fp
    2158:	df000017 	ldw	fp,0(sp)
    215c:	dec00104 	addi	sp,sp,4
    2160:	f800283a 	ret

00002164 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2164:	deffff04 	addi	sp,sp,-4
    2168:	df000015 	stw	fp,0(sp)
    216c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2170:	000170fa 	wrctl	ienable,zero
}
    2174:	e037883a 	mov	sp,fp
    2178:	df000017 	ldw	fp,0(sp)
    217c:	dec00104 	addi	sp,sp,4
    2180:	f800283a 	ret
