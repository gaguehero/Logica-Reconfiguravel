
app_NOVO2.elf:     file format elf32-littlenios2
app_NOVO2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000150 memsz 0x0000015c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000150  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00002170  00002170  00001170  2**2
                  ALLOC, SMALL_DATA
  3 .comment      00000026  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00001198  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000c6  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000718  00000000  00000000  00001306  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000225  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000910  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000048  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d7  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_alt_sim_info 00000010  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00002750  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .thread_model 00000003  00000000  00000000  000030ec  2**0
                  CONTENTS, READONLY
 15 .cpu          00000003  00000000  00000000  000030ef  2**0
                  CONTENTS, READONLY
 16 .qsys         00000001  00000000  00000000  000030f2  2**0
                  CONTENTS, READONLY
 17 .simulation_enabled 00000001  00000000  00000000  000030f3  2**0
                  CONTENTS, READONLY
 18 .stderr_dev   00000004  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY
 19 .stdin_dev    00000004  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY
 20 .stdout_dev   00000004  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY
 21 .sopc_system_name 0000000a  00000000  00000000  00003100  2**0
                  CONTENTS, READONLY
 22 .quartus_project_dir 0000000f  00000000  00000000  0000310a  2**0
                  CONTENTS, READONLY
 23 .sopcinfo     0001fee1  00000000  00000000  00003119  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002170 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000020c0 g     F .text	00000040 alt_main
00002000 g     F .entry	0000000c __reset
00002174 g     O .bss	00000004 alt_argv
0000a170 g       *ABS*	00000000 _gp
0000217c g       *ABS*	00000000 __bss_end
0000217c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
00002134 g     F .text	0000001c alt_sys_init
0000217c g       *ABS*	00000000 __alt_stack_base
00002170 g       *ABS*	00000000 __bss_start
00002058 g     F .text	00000068 main
00002178 g     O .bss	00000004 alt_envp
00002100 g     F .text	00000034 alt_irq_init
00002170 g     O .bss	00000004 alt_argc
00002170 g       *ABS*	00000000 _edata
0000217c g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
00002150 g     F .text	00000020 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a85c14 	ori	gp,gp,41328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	10885c14 	ori	r2,r2,8560

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c85f14 	ori	r3,r3,8572

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00020c00 	call	20c0 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
#include <stdio.h>
#include "io.h"
#include "system.h"
int main()
{
    2058:	defffd04 	addi	sp,sp,-12
    205c:	df000215 	stw	fp,8(sp)
    2060:	df000204 	addi	fp,sp,8
     int atual, i=0;
    2064:	e03ffe15 	stw	zero,-8(fp)
     //printf("Hello from Nios II!\n")
     while(i++ < 50){
    2068:	00000706 	br	2088 <main+0x30>
             atual = IORD(EXEMPLO_NOVO_0_BASE,0);
    206c:	0005883a 	mov	r2,zero
    2070:	10800037 	ldwio	r2,0(r2)
    2074:	e0bfff15 	stw	r2,-4(fp)
             IOWR(EXEMPLO_NOVO_0_BASE,0,0x12345678);
    2078:	0007883a 	mov	r3,zero
    207c:	00848d34 	movhi	r2,4660
    2080:	10959e04 	addi	r2,r2,22136
    2084:	18800035 	stwio	r2,0(r3)
#include "system.h"
int main()
{
     int atual, i=0;
     //printf("Hello from Nios II!\n")
     while(i++ < 50){
    2088:	e0bffe17 	ldw	r2,-8(fp)
    208c:	10800c90 	cmplti	r2,r2,50
    2090:	1007883a 	mov	r3,r2
    2094:	e0bffe17 	ldw	r2,-8(fp)
    2098:	10800044 	addi	r2,r2,1
    209c:	e0bffe15 	stw	r2,-8(fp)
    20a0:	18803fcc 	andi	r2,r3,255
    20a4:	1004c03a 	cmpne	r2,r2,zero
    20a8:	103ff01e 	bne	r2,zero,206c <main+0x14>
             atual = IORD(EXEMPLO_NOVO_0_BASE,0);
             IOWR(EXEMPLO_NOVO_0_BASE,0,0x12345678);
     }
return 0;
    20ac:	0005883a 	mov	r2,zero
}
    20b0:	e037883a 	mov	sp,fp
    20b4:	df000017 	ldw	fp,0(sp)
    20b8:	dec00104 	addi	sp,sp,4
    20bc:	f800283a 	ret

000020c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    20c0:	defffe04 	addi	sp,sp,-8
    20c4:	dfc00115 	stw	ra,4(sp)
    20c8:	df000015 	stw	fp,0(sp)
    20cc:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    20d0:	0009883a 	mov	r4,zero
    20d4:	00021000 	call	2100 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    20d8:	00021340 	call	2134 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    20dc:	d1200017 	ldw	r4,-32768(gp)
    20e0:	d1600117 	ldw	r5,-32764(gp)
    20e4:	d1a00217 	ldw	r6,-32760(gp)
    20e8:	00020580 	call	2058 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    20ec:	e037883a 	mov	sp,fp
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret

00002100 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2100:	defffd04 	addi	sp,sp,-12
    2104:	dfc00215 	stw	ra,8(sp)
    2108:	df000115 	stw	fp,4(sp)
    210c:	df000104 	addi	fp,sp,4
    2110:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2114:	00021500 	call	2150 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2118:	00800044 	movi	r2,1
    211c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2120:	e037883a 	mov	sp,fp
    2124:	dfc00117 	ldw	ra,4(sp)
    2128:	df000017 	ldw	fp,0(sp)
    212c:	dec00204 	addi	sp,sp,8
    2130:	f800283a 	ret

00002134 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2134:	deffff04 	addi	sp,sp,-4
    2138:	df000015 	stw	fp,0(sp)
    213c:	d839883a 	mov	fp,sp
}
    2140:	e037883a 	mov	sp,fp
    2144:	df000017 	ldw	fp,0(sp)
    2148:	dec00104 	addi	sp,sp,4
    214c:	f800283a 	ret

00002150 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2150:	deffff04 	addi	sp,sp,-4
    2154:	df000015 	stw	fp,0(sp)
    2158:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    215c:	000170fa 	wrctl	ienable,zero
}
    2160:	e037883a 	mov	sp,fp
    2164:	df000017 	ldw	fp,0(sp)
    2168:	dec00104 	addi	sp,sp,4
    216c:	f800283a 	ret
